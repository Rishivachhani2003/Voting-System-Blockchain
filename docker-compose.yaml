version: '3.9'

services:
  frontend:
    build:
      context: ./blockchain
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - backend
        
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    environment:
      - MONGODB_URI=${MONGODB_URI}
    depends_on:
      - mongo
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    restart: unless-stopped

# version: '3.9'

# services:
#   frontend:
#     build:
#       context: ./blockchain
#       dockerfile: Dockerfile
#     ports:
#       - '3000:3000'
#     depends_on:
#       backend:
#         condition: service_healthy
#     environment:
#       - REACT_APP_BACKEND_URL=http://localhost:8000
#     healthcheck:
#       test: ['CMD', 'curl', '-f', 'http://localhost:3000']
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     restart: unless-stopped

#   backend:
#     build:
#       context: ./server
#       dockerfile: Dockerfile
#     ports:
#       - '8000:8000'
#     environment:
#       - MONGODB_URI=${MONGODB_URI}
#     depends_on:
#       mongo:
#         condition: service_healthy
#     healthcheck:
#       test: ['CMD', 'curl', '-f', 'http://localhost:8000']
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     restart: unless-stopped

#   mongo:
#     image: mongo
#     ports:
#       - "27017:27017"
#     healthcheck:
#       test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     restart: unless-stopped
